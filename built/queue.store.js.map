{"version":3,"sources":["../src/queue.store.js"],"names":["connection","init","config","connectionStr","user","password","host","connect","getQueue","createChannel","channel","assertQueue","name","extend","durable","exclusive","autoDelete","setting","q","ch","mq","ctx","next","download","qres","bindQueue","queue","each","queueItem","resultUrls","items","url","console","log","create","status","publish","Buffer","priority","persistent"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAIA,mBAAJ;;AAEA,IAAMC;AAAA,0EAAO,iBAAMC,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACLC,qCADK,eACqBD,OAAOE,IAD5B,SACoCF,OAAOG,QAD3C,SACuDH,OAAOI,IAD9D;;AAAA,4BAEJN,UAFI;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAGc,kBAAQO,OAAR,CAAgBJ,aAAhB,CAHd;;AAAA;AAGLH,kCAHK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAOA,IAAMQ;AAAA,2EAAW,kBAAMN,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACOF,WAAWS,aAAX,EADP;;AAAA;AACTC,+BADS;AAAA;AAAA,+BAECA,QAAQC,WAAR,CAAoBT,OAAOU,IAA3B,EAAiC,iBAAEC,MAAF,CAAS;AACpDC,qCAAS,IAD2C;AAEpDC,uCAAW,KAFyC;AAGpDC,wCAAY;AAHwC,yBAAT,EAI5Cd,OAAOe,OAJqC,CAAjC,CAFD;;AAAA;AAETC,yBAFS;AAAA,0DAQN;AACHC,gCAAIT,OADD;AAEHQ,+BAAGA;AAFA,yBARM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAX;;AAAA;AAAA;AAAA;AAAA,GAAN;;;2EAce,kBAAMhB,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACLD,KAAKC,OAAOkB,EAAZ,CADK;;AAAA;AAAA;AAAA,mGAGJ,kBAAMC,GAAN,EAAWC,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDACcd,SAASN,OAAOqB,QAAhB,CADd;;AAAA;AACCC,oDADD;AAAA;AAAA,uDAGGA,KAAKL,EAAL,CAAQM,SAAR,CAAkBD,KAAKN,CAAL,CAAOQ,KAAzB,EAAgC,WAAhC,EAAgDF,KAAKN,CAAL,CAAOQ,KAAvD,WAHH;;AAAA;AAIH,iEAAEC,IAAF,CAAON,IAAIO,SAAJ,CAAcC,UAAd,CAAyBC,KAAhC,EAAuC,UAACC,GAAD,EAAS;AAC5CC,4DAAQC,GAAR,CAAYF,GAAZ;AACA,wDAAIA,IAAIG,MAAJ,IAAcH,IAAIG,MAAJ,CAAWC,MAAX,KAAsB,GAAxC,EAA6C;AACzCX,6DAAKL,EAAL,CAAQiB,OAAR,CAAgB,WAAhB,EAAgCZ,KAAKN,CAAL,CAAOQ,KAAvC,YAAqD,IAAIW,MAAJ,CAAW,yBAAeN,IAAIG,MAAnB,CAAX,CAArD,EAA6F;AACzFI,sEAAU,CAD+E;AAEzFC,wEAAY;AAF6E,yDAA7F;AAIH;AACJ,iDARD;;AAJG;AAAA,uDAcGjB,MAdH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAHI;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K","file":"queue.store.js","sourcesContent":["import amqplib from \"amqplib\";\nimport _ from \"lodash\";\n\nlet connection;\n\nconst init = async(config) => {\n    let connectionStr = `amqp://${config.user}:${config.password}@${config.host}`;\n    if (!connection) {\n        connection = await amqplib.connect(connectionStr);\n    }\n};\n\nconst getQueue = async(config) => {\n    let channel = await connection.createChannel();\n    let q = await channel.assertQueue(config.name, _.extend({\n        durable: true,\n        exclusive: false,\n        autoDelete: false\n    }, config.setting));\n\n    return {\n        ch: channel,\n        q: q\n    };\n};\n\nexport default async(config) => {\n    await init(config.mq);\n\n    return async(ctx, next) => {\n        let qres = await getQueue(config.download);\n\n        await qres.ch.bindQueue(qres.q.queue, \"amq.topic\", `${qres.q.queue}.urls`);\n        _.each(ctx.queueItem.resultUrls.items, (url) => {\n            console.log(url);\n            if (url.create && url.create.status === 201) {\n                qres.ch.publish(\"amq.topic\", `${qres.q.queue}.urls`, new Buffer(JSON.stringify(url.create)), {\n                    priority: 1,\n                    persistent: true\n                });\n            }\n        });\n\n        await next();\n    };\n};"]}