{"version":3,"sources":["../../src/lib/save.urls.js"],"names":["SaveUrls","client","config","fields","urls","esIndex","type","urlsById","keyBy","docs","forEach","url","push","_index","_type","_id","mget","resources","newUrls","filter","doc","error","found","each","create","pick","extend","Date","now","status","length","save"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;IAEaA,Q,WAAAA,Q;;;AACT,sBAAYC,MAAZ,EAAoBC,MAApB,EAA4BC,MAA5B,EAAoC;AAAA;AAAA,yIAC1BF,MAD0B,EAClBC,MADkB,EACVC,MADU;AAEnC;;;;;mGAEUC,I,EAAMC,O,EAASC,I;;;;;;;;AAChBC,wC,GAAW,iBAAEC,KAAF,CAAQJ,IAAR,EAAc,KAAd,C;AACbK,oC,GAAO,E;;qCAEPL,I;;;;;AACA;AACA,iDAAEM,OAAF,CAAUH,QAAV,EAAoB,UAACI,GAAD,EAAS;AACzBF,yCAAKG,IAAL,CAAU;AACNC,gDAAQR,OADF;AAENS,+CAAOR,IAFD;AAGNS,6CAAKJ,IAAII;AAHH,qCAAV;AAKH,iCAND;AAOA;;uCACsB,KAAKC,IAAL,CAAUP,IAAV,C;;;AAAlBQ,yC;;AACJ;AACIC,uC,GAAU,iBAAEC,MAAF,CAASF,UAAUR,IAAnB,EAAyB,UAACW,GAAD,EAAS;AAC5C,wCAAIA,IAAIC,KAAJ,IAAaD,IAAIC,KAAJ,CAAUf,IAAV,KAAmB,2BAApC,EAAiE;AAC7D,+CAAO,IAAP;AACH;AACD,wCAAIc,IAAIE,KAAJ,KAAc,KAAlB,EAAyB;AACrB,+CAAO,IAAP;AACH;;AAED,2CAAO,KAAP;AACH,iCATa,C;;AAWd;;AACAb,uCAAO,EAAP;AACA,iDAAEc,IAAF,CAAOL,OAAP,EAAgB,UAACP,GAAD,EAAS;AACrB,wCAAIJ,SAASI,IAAII,GAAb,CAAJ,EAAuB;AACnBN,6CAAKG,IAAL,CAAU;AACNY,oDAAQ;AACJX,wDAAQR,OADJ;AAEJS,uDAAOR,IAFH;AAGJS,qDAAKJ,IAAII;AAHL;AADF,yCAAV;AAOAN,6CAAKG,IAAL,CAAU;AACNQ,iDAAK,OAAKK,IAAL,CAAU,iBAAEC,MAAF,CAAS,EAAE,cAAcC,KAAKC,GAAL,EAAhB,EAA4BC,QAAQ,QAApC,EAAT,EAAyDtB,SAASI,IAAII,GAAb,CAAzD,CAAV;AADC,yCAAV;AAGH;AAEJ,iCAdD;;qCAeIN,KAAKqB,M;;;;;;uCACQ,KAAKC,IAAL,CAAUtB,IAAV,C;;;;;;iEAId,E","file":"save.urls.js","sourcesContent":["import _ from \"lodash\";\nimport { SaveBase } from \"./save.base\";\n\nexport class SaveUrls extends SaveBase {\n    constructor(client, config, fields) {\n        super(client, config, fields);\n    }\n\n    async deal(urls, esIndex, type) {\n        const urlsById = _.keyBy(urls, \"_id\");\n        let docs = [];\n\n        if (urls) {\n            // 遍历所有的链接，全部mget一下\n            _.forEach(urlsById, (url) => {\n                docs.push({\n                    _index: esIndex,\n                    _type: type,\n                    _id: url._id\n                });\n            });\n            // 判断链接是否存在\n            let resources = await this.mget(docs);\n            // 如果不存在，则新建；\n            let newUrls = _.filter(resources.docs, (doc) => {\n                if (doc.error && doc.error.type === \"index_not_found_exception\") {\n                    return true;\n                }\n                if (doc.found === false) {\n                    return true;\n                }\n\n                return false;\n            });\n\n            // 新建不在数据库中的文档\n            docs = [];\n            _.each(newUrls, (url) => {\n                if (urlsById[url._id]) {\n                    docs.push({\n                        create: {\n                            _index: esIndex,\n                            _type: type,\n                            _id: url._id\n                        }\n                    });\n                    docs.push({\n                        doc: this.pick(_.extend({ \"@timestamp\": Date.now(), status: \"queued\" }, urlsById[url._id]))\n                    });\n                }\n\n            });\n            if (docs.length) {\n                return await this.save(docs);\n            }\n        }\n\n        return {};\n    }\n}"]}