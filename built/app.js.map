{"version":3,"sources":["../src/app.js"],"names":["saveQueueItemFields","queueResultUrl","config","client","esIndex","saveUrls","saveResults","saveQueueItem","ctx","next","key","queueItem","deal","analysisUrlResult","resultUrls","_id","analysisResult","resultResults","resultQueueItem","errors","create","status","urlStore"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;AACA;;AACA;;;;AACA;;;;;;AAEA,IAAMA,sBAAsB,CACxB,UADwB,EAExB,MAFwB,EAGxB,OAHwB,EAIxB,MAJwB,EAKxB,MALwB,EAMxB,OANwB,EAOxB,KAPwB,EAQxB,YARwB,EASxB,OATwB,EAUxB,YAVwB,EAWxB,cAXwB,EAYxB,YAZwB,EAaxB,QAbwB,EAcxB,WAdwB,CAA5B;;AAiBO,IAAMC,yDAAN;;AAEP;;;;;;;;;;;;;;;;;;0EAgBe,kBAAMC,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACU,kBAAGA,MAAH,CADV;;AAAA;AACLC,8BADK;AAELC,+BAFK,GAEK,eAFL;AAGLC,gCAHK,GAGM,mBAAaF,MAAb,EAAqBD,MAArB,EAA6BF,mBAA7B,CAHN;AAILM,mCAJK,GAIS,uBAAgBH,MAAhB,EAAwBD,MAAxB,EAAgCF,mBAAhC,CAJT;AAKLO,qCALK,GAKW,yBAAkBJ,MAAlB,EAA0BD,MAA1B,EAAkCF,mBAAlC,CALX;;AAOX;;;;;;AAPW;AAAA,mGAYJ,iBAAMQ,GAAN,EAAWC,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACGC,mDADH,GACSF,IAAIN,MAAJ,CAAWQ,GADpB;;AAAA,qDAGCF,IAAIG,SAHL;AAAA;AAAA;AAAA;;AAAA;AAAA,uDAIwBN,SAASO,IAAT,CAAcJ,IAAIG,SAAJ,CAAcE,iBAA5B,EAA+CT,OAA/C,EAAwDM,GAAxD,CAJxB;;AAAA;AAIKI,0DAJL;AAAA;AAAA,uDAM2BR,YAAYM,IAAZ,CAAiBJ,IAAIG,SAAJ,CAAcI,GAA/B,EAAoCP,IAAIG,SAAJ,CAAcK,cAAlD,EAAkEN,GAAlE,CAN3B;;AAAA;AAMKO,6DANL;AAAA;AAAA,uDAO6BV,cAAcK,IAAd,CAAmBJ,IAAIG,SAAvB,EAAkCP,OAAlC,EAA2CM,GAA3C,CAP7B;;AAAA;AAOKQ,+DAPL;;AAAA,sDASKJ,WAAWK,MAAX,KAAsB,IAT3B;AAAA;AAAA;AAAA;;AAAA,sDAUW,eAAKC,MAAL,CAAY,GAAZ,CAVX;;AAAA;AAAA,sDAYKH,cAAcE,MAAd,KAAyB,IAZ9B;AAAA;AAAA;AAAA;;AAAA,sDAaW,eAAKC,MAAL,CAAY,GAAZ,CAbX;;AAAA;AAAA,sDAeKF,gBAAgBC,MAAhB,KAA2B,IAfhC;AAAA;AAAA;AAAA;;AAAA,sDAgBW,eAAKC,MAAL,CAAY,GAAZ,CAhBX;;AAAA;;AAmBCZ,oDAAIG,SAAJ,CAAcG,UAAd,GAA2BA,UAA3B;;AAnBD;AAqBHN,oDAAIa,MAAJ,CAAWC,QAAX,GAAsB,IAAtB;;AArBG;AAAA,uDAuBGb,MAvBH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAZI;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K","file":"app.js","sourcesContent":["import es from \"./lib/es\";\nimport { SaveUrls } from \"./lib/save.urls\";\nimport { SaveResults } from \"./lib/save.results\";\nimport { SaveQueueItem } from \"./lib/save.queueitem\";\nimport boom from \"boom\";\nimport queueStore from \"./queue.store\";\n\nconst saveQueueItemFields = [\n    \"protocol\",\n    \"host\",\n    \"query\",\n    \"port\",\n    \"path\",\n    \"depth\",\n    \"url\",\n    \"errorCount\",\n    \"error\",\n    \"statusCode\",\n    \"responseBody\",\n    \"@timestamp\",\n    \"status\",\n    \"updatedAt\"\n];\n\nexport const queueResultUrl = queueStore;\n\n/**\n * queueItem                            Object                    当前爬取地址对象\n * queueItem.analysisUrlResult          Array<Object>             分析html页面得出的url地址数组\n * queueItem.analysisResult             Object                    分析html页面得出的数据结果\n * queueItem.analysisResultUrls         Array<String>             分析页面解析结果中的地址数组\n * queueItem.analysisResultUrlResult    Array<Object>             分析页面解析结果中的地址数组，经过queue处理\n * queueItem.aiAnalysisResult           Array<Object|String>      分词解析后的结果\n * queueItem.responseBody               String                    页面的html\n * queueItem.statusCode                 Number                    下载页面得到的返回码\n * queueItem.protocol                   String                    地址协议\n * queueItem.host                       String                    host地址\n * queueItem.query                      String                    querystring\n * queueItem.port                       Number                    地址\n * queueItem.url                        String                    完整地址\n * queueItem.depth                      Number                    深度\n */\nexport default async(config) => {\n    const client = await es(config);\n    const esIndex = \"crawler.urls1\";\n    const saveUrls = new SaveUrls(client, config, saveQueueItemFields);\n    const saveResults = new SaveResults(client, config, saveQueueItemFields);\n    const saveQueueItem = new SaveQueueItem(client, config, saveQueueItemFields);\n\n    /**\n     * 1、保存分析出来的url入库\n     * 2、保存分析结果入库\n     * 3、保存queueItem入库\n     */\n    return async(ctx, next) => {\n        const key = ctx.config.key;\n\n        if (ctx.queueItem) {\n            let resultUrls = await saveUrls.deal(ctx.queueItem.analysisUrlResult, esIndex, key);\n            // let resultUrls1 = await saveUrls.deal();\n            let resultResults = await saveResults.deal(ctx.queueItem._id, ctx.queueItem.analysisResult, key);\n            let resultQueueItem = await saveQueueItem.deal(ctx.queueItem, esIndex, key);\n\n            if (resultUrls.errors === true) {\n                throw boom.create(604);\n            }\n            if (resultResults.errors === true) {\n                throw boom.create(605);\n            }\n            if (resultQueueItem.errors === true) {\n                throw boom.create(606);\n            }\n\n            ctx.queueItem.resultUrls = resultUrls;\n        }\n        ctx.status.urlStore = true;\n\n        await next();\n    };\n};"]}